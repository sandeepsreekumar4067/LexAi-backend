[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "StrOutputParser",
        "importPath": "langchain_core.output_parsers",
        "description": "langchain_core.output_parsers",
        "isExtraImport": true,
        "detail": "langchain_core.output_parsers",
        "documentation": {}
    },
    {
        "label": "OllamaLLM",
        "importPath": "langchain_ollama.llms",
        "description": "langchain_ollama.llms",
        "isExtraImport": true,
        "detail": "langchain_ollama.llms",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "ask_question",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def ask_question():\n    # Get the question from the POST request\n    data = request.json\n    question = data.get('question', '')\n    print(\"recieved the query..\")\n    if not question:\n        print(\"failed\")\n        return jsonify({'error': 'No question provided' , 'status':False}), 400\n    # Invoke the chain with the provided question\n    try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n# Initialize the model and chain\nprompt = ChatPromptTemplate.from_messages([\n    ('system', 'you are an efficient private assistant, give reply to each question efficiently, for every good answer you provide I will be happy'),\n    ('user', 'question:{question}')\n])\nmodel = OllamaLLM(model=\"llama3.1\")\noutput_parser = StrOutputParser()\nchain = prompt | model | output_parser",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "prompt = ChatPromptTemplate.from_messages([\n    ('system', 'you are an efficient private assistant, give reply to each question efficiently, for every good answer you provide I will be happy'),\n    ('user', 'question:{question}')\n])\nmodel = OllamaLLM(model=\"llama3.1\")\noutput_parser = StrOutputParser()\nchain = prompt | model | output_parser\n@app.route('/ask', methods=['POST'])\ndef ask_question():\n    # Get the question from the POST request",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "model = OllamaLLM(model=\"llama3.1\")\noutput_parser = StrOutputParser()\nchain = prompt | model | output_parser\n@app.route('/ask', methods=['POST'])\ndef ask_question():\n    # Get the question from the POST request\n    data = request.json\n    question = data.get('question', '')\n    print(\"recieved the query..\")\n    if not question:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "output_parser",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "output_parser = StrOutputParser()\nchain = prompt | model | output_parser\n@app.route('/ask', methods=['POST'])\ndef ask_question():\n    # Get the question from the POST request\n    data = request.json\n    question = data.get('question', '')\n    print(\"recieved the query..\")\n    if not question:\n        print(\"failed\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "chain",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "chain = prompt | model | output_parser\n@app.route('/ask', methods=['POST'])\ndef ask_question():\n    # Get the question from the POST request\n    data = request.json\n    question = data.get('question', '')\n    print(\"recieved the query..\")\n    if not question:\n        print(\"failed\")\n        return jsonify({'error': 'No question provided' , 'status':False}), 400",
        "detail": "app",
        "documentation": {}
    }
]