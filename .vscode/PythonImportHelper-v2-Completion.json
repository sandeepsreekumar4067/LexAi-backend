[
    {
        "label": "PyPDFLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "OllamaEmbeddings",
        "importPath": "langchain_ollama",
        "description": "langchain_ollama",
        "isExtraImport": true,
        "detail": "langchain_ollama",
        "documentation": {}
    },
    {
        "label": "embeddings",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "embeddings = OllamaEmbeddings(\n    model=\"llama3.1\",\n)\n#uploading the pdf \nprint(\"uploaded the pdf\")\npdf_reader = PyPDFLoader('../Backend/assets/ipc.pdf')\npages = pdf_reader.load_and_split()\n# print(pages)\nprint(\"creating the text splitter\")\ntext_splitter = RecursiveCharacterTextSplitter(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "pdf_reader",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "pdf_reader = PyPDFLoader('../Backend/assets/ipc.pdf')\npages = pdf_reader.load_and_split()\n# print(pages)\nprint(\"creating the text splitter\")\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1000,\n    chunk_overlap=200,\n    length_function=len\n)\n#splitting the ipc",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "pages",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "pages = pdf_reader.load_and_split()\n# print(pages)\nprint(\"creating the text splitter\")\ntext_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1000,\n    chunk_overlap=200,\n    length_function=len\n)\n#splitting the ipc\nprint(\"splitted chunks has been created\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "text_splitter",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "text_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=1000,\n    chunk_overlap=200,\n    length_function=len\n)\n#splitting the ipc\nprint(\"splitted chunks has been created\")\nchunks = text_splitter.split_documents(pages)\nprint(\"Embedding the chunks\")\nembedded_chunks = embeddings.embed_documents([chunk.page_content for chunk in chunks])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "chunks = text_splitter.split_documents(pages)\nprint(\"Embedding the chunks\")\nembedded_chunks = embeddings.embed_documents([chunk.page_content for chunk in chunks])\n# for i, chunk in enumerate(chunks):\n#     print(f\"Chunk {i+1}:\")\n#     print(chunk.page_content)  # `page_content` is the text in this chunk\n#     print(\"-----\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "embedded_chunks",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "embedded_chunks = embeddings.embed_documents([chunk.page_content for chunk in chunks])\n# for i, chunk in enumerate(chunks):\n#     print(f\"Chunk {i+1}:\")\n#     print(chunk.page_content)  # `page_content` is the text in this chunk\n#     print(\"-----\")",
        "detail": "app",
        "documentation": {}
    }
]